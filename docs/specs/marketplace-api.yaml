---
openapi: 3.0.0

info:
  version: '1.0.0'
  title: 'Marketplace Service API'
  description: >-
    Defines resources and methods for offering and bidding physical servers in
    a Marketplace
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/FLOCX/Marketplace_service/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/FLOCX/Marketplace_Service/1.0.0

tags:
  - name: offer
    description: Operations about selling servers
    externalDocs:
      description: To render copy this file into
      url: https://editor.swagger.io/
  - name: bid
    description: Operations about buying servers
    externalDocs:
      description: To render copy this file into
      url: https://editor.swagger.io/
  - name: contract
    description: Operations about Contracts
    externalDocs:
      description: To render copy this file into
      url: https://editor.swagger.io/

paths:
  /offer:
    get:
      tags:
        - offer
      summary: show me offers from everyone
      operationId: list_offers
      description: >-
        Obtain list of offers from everyone. If admin is making this request,
        show all offers with all statuses. In case of a non-admin user show
        offers with status 'available' only.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
    post:
      tags:
        - offer
      summary: Create a new offer
      operationId: create_offer
      description: >-
        Adds attributes <marketplace_offer_id>, <marketplace_date_created>,
        <Status = available> to the incoming offer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/provider_Offer'
        description: offer to be published.
        required: true
      responses:
        '201':
          description: Offer added to marketplace successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: >-
                  Invalid or insufficient input parameters. Cannot create
                  offer.

  /offer/<offer_id>:
    get:
      tags:
        - offer
      summary: Show me details of a particular offer.
      operationId: show_offer(offer_id)
      description: >-
        Admin can query any offer by its offer_id. Non-admin user can query any
        'available' offer and any offer that she herself created.
      responses:
        '200':
          description: Succesful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        '400':
          description: Invalid <offer_id>.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Invalid Offer id'
        '403':
          description: >-
            You do not have sufficient privileges to access this resource! Will
            occur when an non-admin user is trying to access an offer created
            by other user and the status of the offer is anything else except
            'available'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'You are not authorized to access this resource.'
        '404':
          description: <offer_id> does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'offer id does not exist'

    delete:
      tags:
        - offer
      summary: Deletes the offer.
      operationId: cancel_offer(offer_id)
      description: Sets the status field of the offer to "cancelled"
      responses:
        '200':
          description: Offer cancelled successfully
        '400':
          description: Invalid <offer_id>.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Cannot delete. Invalid Offer id'
        '403':
          description: >-
            You do not have sufficient privileges to execute this operation.
            Non-admin or non-owner user cannot update the status field of the
            offer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: >-
                  You do not sufficient priviledges to perform this action
        '404':
          description: <offer_id> does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'offer id does not exist'

    put:
      tags:
        - offer
      summary: updates only the <Status> field of the offer
      operationId: update_offer(offer_id, parameter_key = new value)
      description: Matching Service (available --> used)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - available
                    - matched
                    - used
                    - cancelled
                    - expired
                  example: used
        description: offer to be published.
        required: true

      responses:
        '200':
          description: >-
            Returns complete info of the offer showing updated status field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer_put'
        '400':
          description: Invalid <offer_id>.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Invalid Offer id'
        '403':
          description: >-
            You do not have sufficient privileges to execute this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: >-
                  You do not sufficient priviledges to perform this action
        '404':
          description: <offer_id> does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'offer id does not exist'

  /bid:
    get:
      tags:
        - bid
      summary: List all bids
      operationId: list_bids(all)
      description: >-
        Admin can list all bids. Matching Service Engine and non-creator users
        can only see the list of bids with status `available`.
      responses:
        '200':
          description: Succesful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bid'

    post:
      tags:
        - bid
      summary: Create a new bid
      operationId: create_bid
      description: >-
        Adds attributes <marketplace_bid_id>, <marketplace_date_created>,
        <Status = available> to the incoming bid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_bid'
        description: bid to be published.
        required: true
      responses:
        '201':
          description: Bid added to marketplace successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bid'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Invalid bid id'

  /bid/<bid_id>:
    get:
      tags:
        - bid
      summary: Display data about a particular bid.
      operationId: show_bid(bid_id)
      description: >-
        Admin can query any bid by its bid_id. Non-admin user can query any
        'available' bid and any bid that he created himself.
      responses:
        '200':
          description: Succesful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bid'
        '400':
          description: Invalid <bid_id>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Invalid bid id'
        '403':
          description: >-
            You do not have sufficient privileges to access this resource! Will
            occur when an non-admin user is trying to access a bid created by
            other user and the status of the bid is anything else except
            'available'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: >-
                  You do not sufficient priviledges to perform this action
        '404':
          description: <bid_id> does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'bid id does not exist'
    delete:
      tags:
        - bid
      summary: Deletes the particular bid.
      operationId: cancel_bid(bid_id)
      description: Sets the status field of the bid to "cancelled"
      responses:
        '200':
          description: Bid cancelled successfully
        '400':
          description: Invalid <bid_id>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Invalid bid id'
        '403':
          description: >-
            You do not have sufficient privileges to execute this operation.
            Non-admin or non-owner user cannot update the status field of the
            bid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: >-
                  You do not sufficient priviledges to perform this action
        '404':
          description: <bid_id> does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Bid id does not exist.'
    put:
      tags:
        - bid
      summary: updates only the <Status> field of the bid.
      operationId: update_offer(bid_id, parameter_key = new value)
      description: Matching Service (available --> used)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - available
                    - matched
                    - used
                    - cancelled
                    - expired
                  example: matched
        description: Bid to be updated.
        required: true

      responses:
        '200':
          description: >-
            Returns complete info of the bid showing updated status field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bid_put'
        '400':
          description: Invalid <bid_id>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Invalid Bid id'
        '403':
          description: >-
            You do not have sufficient privileges to execute this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: >-
                  You do not sufficient priviledges to perform this action
        '404':
          description: <bid_id> does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Bid id does not exist'

  /contract:
    get:
      tags:
        - contract
      summary: List all contracts
      operationId: list_contracts
      description: >-
        Admin can list all contracts. Non-admin users can only see the list of
        contracts that involve the offers and bids they made.
      responses:
        '200':
          description: Succesful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contract'

    post:
      tags:
        - contract
      summary: Create a new contract
      operationId: create_contract
      description: >-
        match_maker reads bids and offers from marketplace-service database.
        When a match between bid and offer is found, a contract is created.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bid:
                  $ref: '#/components/schemas/Bid'
                offers:
                  type: array
                  items:
                    $ref: '#/components/schemas/Offer'
        required: true

      responses:
        '201':
          description: >-
            Updates users whose bids and offers are involved in the contract.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Contract matched"
                  contract_info:
                    $ref: '#/components/schemas/Contract'

  /contract/<contract_id>:
    get:
      tags:
        - contract
      summary: Display data about a particular contract.
      operationId: show_contract(contract_id)
      description: >-
        Admin can query any contract by its contract_id. Non-admin user can
        query any contract that involves the offers or bid they created.
      responses:
        '200':
          description: Succesful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contract'
        '400':
          description: Invalid <contract_id>.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Invalid contract id'
        '403':
          description: >-
            You do not have sufficient privileges to access this resource! Will
            occur when an non-admin user is trying to access a contract created
            by other user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: >-
                  You do not sufficient priviledges to perform this action
        '404':
          description: <contract_id> does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Contract id does not exist'
    put:
      tags:
        - contract
      summary: updates only the <Status> field of the contract.
      operationId: update_contract(contract_id, parameter_key = new value)
      description: Matching Service (executed --> finished)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: finished
                  enum:
                    - matched
                    - executed
                    - finished
                    - expired
                    - cancelled
        description: change status of the contract.
        required: true

      responses:
        '200':
          description: >-
            Returns complete info of the bid showing updated status field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract_put'
        '400':
          description: Invalid <contract_id>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Invalid Bid id'
        '403':
          description: >-
            You do not have sufficient privileges to execute this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: >-
                  You do not sufficient priviledges to perform this action
        '404':
          description: <contract_id> does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Contract id does not exist'
    delete:
      tags:
        - contract
      summary: Deletes the particular Contract.
      operationId: cancel_contract(bid_id)
      description: Sets the status field of the contract to "cancelled"
      responses:
        '200':
          description: Contract cancelled successfully
        '400':
          description: Invalid <contract_id> or <contract_id> does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Invalid Contract id'
        '403':
          description: >-
            You do not have sufficient privileges to execute this operation.
            Non-admin or non-owner user cannot update the status field of the
            bid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: >-
                  You do not sufficient priviledges to perform this action
        '404':
          description: <contract_id> does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 'Error'
                message: 'Contract id does not exist'

components:
  schemas:
    Offer:
      type: object
      properties:
        marketplace_offer_id:
          type: string
          format: UUID
          example: 'b711b1ca-a77e-4392-a9b5-dc84c4f469ac'
        provider_offer_id:
          type: string
          format: UUID
          example: '90894712-3b21-4bf7-9899-b4234530ff8b'
        provider_id:
          type: string
          format: UUID
          example: 'b9752cc0-9bed-4f1c-8917-12ade7a6fdbe'
        project_id:
          type: string
          format: UUID
          example: '12a59a51-b4d6-497d-9f75-f56c409305c8'
          description: project that created the offer
        marketplace_date_created:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        status:
          type: string
          enum:
            - available
            - matched
            - used
            - cancelled
            - expired
          default: available
        server_id:    # server id is unique per provider service
          type: string
          format: UUID
          example: 'fb878e3e-9425-4285-babf-0e58a7b091b2'
          description: unique ID of the physical server
        start_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        end_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 August 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-08-16T19:20:30-04:00)
        server_config:
          $ref: '#/components/schemas/Server_config'
        cost:   # it is rate per hour
          type: number
          format: float64
          example: 11
          description: >-
            States floor price, the minimum asking price. Rate is charged per
            hour.

    Offer_put:
      type: object
      properties:
        marketplace_offer_id:
          type: string
          format: UUID
          example: 'b711b1ca-a77e-4392-a9b5-dc84c4f469ac'
        provider_offer_id:
          type: string
          format: UUID
          example: '90894712-3b21-4bf7-9899-b4234530ff8b'
        provider_id:
          type: string
          format: UUID
          example: 'b9752cc0-9bed-4f1c-8917-12ade7a6fdbe'
        project_id:
          type: string
          format: UUID
          example: '12a59a51-b4d6-497d-9f75-f56c409305c8'
          description: project that created the offer
        marketplace_date_created:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        status:
          type: string
          enum:
            - available
            - matched
            - used
            - cancelled
            - expired
          example: used
        server_id:    # server id is unique per provider service
          type: string
          format: UUID
          example: 'fb878e3e-9425-4285-babf-0e58a7b091b2'
          description: unique ID of the physical server
        start_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        end_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 August 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-08-16T19:20:30-04:00)
        server_config:
          $ref: '#/components/schemas/Server_config'
        cost:   # it is rate per hour
          type: number
          format: float64
          example: 11
          description: >-
            States floor price, the minimum asking price. Rate is charged per
            hour.

    provider_Offer:
      type: object
      properties:
        provider_offer_id:
          type: string
          format: UUID
          example: '90894712-3b21-4bf7-9899-b4234530ff8b'
        provider_id:
          type: string
          format: UUID
          example: '90894712-3b21-4bf7-9899-b4219730ff8b'
        project_id:
          type: string
          format: UUID
          example: '12a59a51-b4d6-497d-9f75-f56c409305c8'
          description: project that created the offer
        server_id:
          type: string
          format: UUID
          example: 'fb878e3e-9425-4285-babf-0e58a7b091b2'
          description: unique ID of the physical server
        start_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        end_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 August 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-08-16T19:20:30-04:00)
        server_config:
          $ref: '#/components/schemas/Server_config'
        cost:
          type: number
          format: float64
          example: 11
          description: >-
            States floor price, the minimum asking price. Rate is charged per
            hour.

    Contract:
      type: object
      properties:
        contract_id:
          type: string
          format: UUID
          example: 'b711b1ca-a77e-4392-abcd-dc84c4f469ac'
        time_created:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        bid_id:
          type: string
          format: UUID
          example: 'b711b1ca-a77e-4392-abcd-dc84c4f469ac'
        offers:
          type: array
          items:
            type: string
            format: UUID
          example:
            - 'b711b1ca-a77e-4392-abcd-dc84c4f46900'
            - 'b711b1ca-a77e-4392-abcd-dc84c4f46901'
            - 'b711b1ca-a77e-4392-abcd-dc84c4f46902'
            - 'b711b1ca-a77e-4392-abcd-dc84c4f46915'
        start_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        end_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 August 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-08-16T19:20:30-04:00)
        cost:
          type: number
          format: float64
          example: 11
          description: >-
            States floor price, the minimum asking price. Rate is charged per
            hour.
        status:
          type: string
          enum:
            - matched
            - executed
            - finished
            - expired
            - cancelled
          default: matched

    Contract_put:
      type: object
      properties:
        contract_id:
          type: string
          format: UUID
          example: 'b711b1ca-a77e-4392-abcd-dc84c4f469ac'
        time_created:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        bid_id:
          type: string
          format: UUID
          example: 'b711b1ca-a77e-4392-abcd-dc84c4f469ac'
        offers:
          type: array
          items:
            type: string
            format: UUID
          example:
            - 'b711b1ca-a77e-4392-abcd-dc84c4f46900'
            - 'b711b1ca-a77e-4392-abcd-dc84c4f46901'
            - 'b711b1ca-a77e-4392-abcd-dc84c4f46902'
            - 'b711b1ca-a77e-4392-abcd-dc84c4f46915'
        start_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        end_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 August 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-08-16T19:20:30-04:00)
        cost:
          type: number
          format: float64
          example: 11
          description: >-
            States floor price, the minimum asking price. Rate is charged per
            hour.
        status:
          type: string
          enum:
            - matched
            - executed
            - finished
            - expired
            - cancelled
          example: finished

    Server_config:
      properties:
        properties:
          type: object
          description: >-
            Free form meta-data that describes the server.This is just a
            sample.
          additionalProperties: true
          example:
            memory_gb: 10240
            cpu_arch: x86_64
            cpu_physical_count: 4
            cpu_core_count: 16
            cpu_ghz: 3.0
            disks:
              - size_gb: 500
                model: 'YOYODYNE 1234'
              - size_gb: 1024
                model: 'evo840 ssd'

    user_bid:
      type: object
      properties:
        creator_bid_id:
          type: string
          format: UUID
          example: '12a59a51-b4d6-497d-9f75-f56c409305c8'
          description: id generated by the user creating the bid.
        project_id:
          type: string
          format: UUID
          example: '12a59a51-b4d6-497d-9f75-f56c409305c8'
          description: project that created the bid
        start_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        end_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 August 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-08-16T19:20:30-04:00)
        duration:
          type: integer
          format: int64
          example: 16400
          description: >-
            Number of seconds available anytime between 'Start_time' and
            'End_time'
        server_quantity:
          type: integer
          format: int32
          example: 80
        server_config_query:
          $ref: '#/components/schemas/bid_hw_config'
        cost:
          type: number
          format: float64
          example: 11
          description: >-
            States ceiling price, the maximum asking price. Rate is charged per
            hour.

    bid_hw_config:
      description: inspired by http://jmespath.org/examples.html
      type: array
      items:
        type: string
        example:
          - ["cpu_type", "contains", "intel"]
          - ["cores", ">=", "4"]
          - ["RAM_GB", ">=", "8"]
          - ["storage_size_GB", ">=", "512"]

    Bid:
      type: object
      properties:
        marketplace_bid_id:
          type: string
          format: UUID
          example: '90894712-3b21-4bf7-9899-b4219730ff8b'
        creator_bid_id:
          type: string
          format: UUID
          example: '12a59a51-b4d6-497d-9f75-f56c409305c8'
          description: id generated by the user creating the bid.
        project_id:
          type: string
          format: UUID
          example: '12a59a51-b4d6-497d-9f75-f56c409305c8'
          description: project that created the bid
        start_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        server_quantity:
          type: integer
          format: int32
          example: 80
        end_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 August 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-08-16T19:20:30-04:00)
        duration:
          type: integer
          format: int64
          example: 164
          description: >-
            Number of hours available anytime between 'Start_time' and
            'End_time'
        status:
          type: string
          enum:
            - available
            - matched
            - used
            - cancelled
            - expired
          default: available
        server_config_query:
          $ref: '#/components/schemas/bid_hw_config'
        cost:
          type: number
          format: float64
          example: 11
          description: >-
            States ceiling price, the maximum asking price. Rate is charged per
            hour.

    Bid_put:
      type: object
      properties:
        marketplace_bid_id:
          type: string
          format: UUID
          example: '90894712-3b21-4bf7-9899-b4219730ff8b'
        creator_bid_id:
          type: string
          format: UUID
          example: '12a59a51-b4d6-497d-9f75-f56c409305c8'
          description: id generated by the user creating the bid.
        project_id:
          type: string
          format: UUID
          example: '12a59a51-b4d6-497d-9f75-f56c409305c8'
          description: project that created the bid
        start_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 July 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-07-16T19:20:30-04:00)
        server_quantity:
          type: integer
          format: int32
          example: 80
        end_time:
          description: >-
            ISO-8601 DateTime format with timezone difference from UTC  eg
            '(Date-16 August 2016, Time 8-30 pm Boston time)'
          type: string
          format: (yyyy-mm-ddThh:mm:ss-/+hh)
          example: (2016-08-16T19:20:30-04:00)
        duration:
          type: integer
          format: int64
          example: 164
          description: >-
            Number of hours available anytime between 'Start_time' and
            'End_time'
        status:
          type: string
          enum:
            - available
            - matched
            - used
            - cancelled
            - expired
          example: matched
        server_config_query:
          $ref: '#/components/schemas/bid_hw_config'
        cost:
          type: number
          format: float64
          example: 11
          description: >-
            States ceiling price, the maximum asking price. Rate is charged per
            hour.

    Error:
      type: object
      properties:
        status:
          type: string
          example: "Error"
        message:
          type: string
          example: "Invalid input parameters"
